{
  "version": 3,
  "sources": ["../../vuetify/src/components/VAlert/VAlert.tsx", "../../vuetify/src/components/VAlert/VAlertTitle.ts"],
  "sourcesContent": ["// Styles\nimport './VAlert.sass'\n\n// Components\nimport { VAlertTitle } from './VAlertTitle'\nimport { VBtn } from '@/components/VBtn'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { IconValue } from '@/composables/icons'\nimport { useLocale } from '@/composables/locale'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\n\n// Utilities\nimport { toRef } from 'vue'\nimport { genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nconst allowedTypes = ['success', 'info', 'warning', 'error'] as const\n\ntype ContextualType = typeof allowedTypes[number]\n\nexport const makeVAlertProps = propsFactory({\n  border: {\n    type: [Boolean, String] as PropType<boolean | 'top' | 'end' | 'bottom' | 'start'>,\n    validator: (val: boolean | string) => {\n      return typeof val === 'boolean' || [\n        'top',\n        'end',\n        'bottom',\n        'start',\n      ].includes(val)\n    },\n  },\n  borderColor: String,\n  closable: Boolean,\n  closeIcon: {\n    type: IconValue,\n    default: '$close',\n  },\n  closeLabel: {\n    type: String,\n    default: '$vuetify.close',\n  },\n  icon: {\n    type: [Boolean, String, Function, Object] as PropType<false | IconValue>,\n    default: null,\n  },\n  modelValue: {\n    type: Boolean,\n    default: true,\n  },\n  prominent: Boolean,\n  title: String,\n  text: String,\n  type: {\n    type: String as PropType<ContextualType>,\n    validator: (val: ContextualType) => allowedTypes.includes(val),\n  },\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeDimensionProps(),\n  ...makeElevationProps(),\n  ...makeLocationProps(),\n  ...makePositionProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps(),\n  ...makeVariantProps({ variant: 'flat' } as const),\n}, 'VAlert')\n\nexport type VAlertSlots = {\n  default: never\n  prepend: never\n  title: never\n  text: never\n  append: never\n  close: { props: Record<string, any> }\n}\n\nexport const VAlert = genericComponent<VAlertSlots>()({\n  name: 'VAlert',\n\n  props: makeVAlertProps(),\n\n  emits: {\n    'click:close': (e: MouseEvent) => true,\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { emit, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const icon = toRef(() => {\n      if (props.icon === false) return undefined\n      if (!props.type) return props.icon\n\n      return props.icon ?? `$${props.type}`\n    })\n\n    const { themeClasses } = provideTheme(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(() => ({\n      color: props.color ?? props.type,\n      variant: props.variant,\n    }))\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n    const { textColorClasses, textColorStyles } = useTextColor(() => props.borderColor)\n    const { t } = useLocale()\n\n    const closeProps = toRef(() => ({\n      'aria-label': t(props.closeLabel),\n      onClick (e: MouseEvent) {\n        isActive.value = false\n\n        emit('click:close', e)\n      },\n    }))\n\n    return () => {\n      const hasPrepend = !!(slots.prepend || icon.value)\n      const hasTitle = !!(slots.title || props.title)\n      const hasClose = !!(slots.close || props.closable)\n\n      return isActive.value && (\n        <props.tag\n          class={[\n            'v-alert',\n            props.border && {\n              'v-alert--border': !!props.border,\n              [`v-alert--border-${props.border === true ? 'start' : props.border}`]: true,\n            },\n            {\n              'v-alert--prominent': props.prominent,\n            },\n            themeClasses.value,\n            colorClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            variantClasses.value,\n            props.class,\n          ]}\n          style={[\n            colorStyles.value,\n            dimensionStyles.value,\n            locationStyles.value,\n            props.style,\n          ]}\n          role=\"alert\"\n        >\n          { genOverlays(false, 'v-alert') }\n\n          { props.border && (\n            <div\n              key=\"border\"\n              class={[\n                'v-alert__border',\n                textColorClasses.value,\n              ]}\n              style={ textColorStyles.value }\n            />\n          )}\n\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-alert__prepend\">\n              { !slots.prepend ? (\n                <VIcon\n                  key=\"prepend-icon\"\n                  density={ props.density }\n                  icon={ icon.value }\n                  size={ props.prominent ? 44 : 28 }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"prepend-defaults\"\n                  disabled={ !icon.value }\n                  defaults={{\n                    VIcon: {\n                      density: props.density,\n                      icon: icon.value,\n                      size: props.prominent ? 44 : 28,\n                    },\n                  }}\n                  v-slots:default={ slots.prepend }\n                />\n              )}\n            </div>\n          )}\n\n          <div class=\"v-alert__content\">\n            { hasTitle && (\n              <VAlertTitle key=\"title\">\n                { slots.title?.() ?? props.title }\n              </VAlertTitle>\n            )}\n\n            { slots.text?.() ?? props.text }\n\n            { slots.default?.() }\n          </div>\n\n          { slots.append && (\n            <div key=\"append\" class=\"v-alert__append\">\n              { slots.append() }\n            </div>\n          )}\n\n          { hasClose && (\n            <div key=\"close\" class=\"v-alert__close\">\n              { !slots.close ? (\n                <VBtn\n                  key=\"close-btn\"\n                  icon={ props.closeIcon }\n                  size=\"x-small\"\n                  variant=\"text\"\n                  { ...closeProps.value }\n                />\n              ) : (\n                <VDefaultsProvider\n                  key=\"close-defaults\"\n                  defaults={{\n                    VBtn: {\n                      icon: props.closeIcon,\n                      size: 'x-small',\n                      variant: 'text',\n                    },\n                  }}\n                >\n                  { slots.close?.({ props: closeProps.value }) }\n                </VDefaultsProvider>\n              )}\n            </div>\n          )}\n        </props.tag>\n      )\n    }\n  },\n})\n\nexport type VAlert = InstanceType<typeof VAlert>\n", "// Utilities\nimport { createSimpleFunctional } from '@/util'\n\nexport const VAlertTitle = createSimpleFunctional('v-alert-title')\n\nexport type VAlertTitle = InstanceType<typeof VAlertTitle>\n"],
  "mappings": "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",
  "names": ["VAlertTitle", "createSimpleFunctional", "allowedTypes", "makeVAlertProps", "propsFactory", "border", "type", "Boolean", "String", "validator", "val", "includes", "borderColor", "closable", "closeIcon", "IconValue", "default", "closeLabel", "icon", "Function", "Object", "modelValue", "prominent", "title", "text", "makeComponentProps", "makeDensityProps", "makeDimensionProps", "makeElevationProps", "makeLocationProps", "makePositionProps", "makeRoundedProps", "makeTagProps", "makeThemeProps", "makeVariantProps", "variant", "VAlert", "genericComponent", "name", "props", "emits", "e", "value", "setup", "_ref", "emit", "slots", "isActive", "useProxiedModel", "toRef", "undefined", "themeClasses", "provideTheme", "colorClasses", "colorStyles", "variantClasses", "useVariant", "color", "densityClasses", "useDensity", "dimensionStyles", "useDimension", "elevationClasses", "useElevation", "locationStyles", "useLocation", "positionClasses", "usePosition", "roundedClasses", "useRounded", "textColorClasses", "textColorStyles", "useTextColor", "t", "useLocale", "closeProps", "onClick", "hasPrepend", "prepend", "hasTitle", "hasClose", "close", "_createVNode", "tag", "_normalizeClass", "class", "_normalizeStyle", "style", "genOverlays", "_createElementVNode", "VIcon", "density", "VDefaultsProvider", "size", "VAlertTitle", "append", "VBtn", "_mergeProps"]
}
