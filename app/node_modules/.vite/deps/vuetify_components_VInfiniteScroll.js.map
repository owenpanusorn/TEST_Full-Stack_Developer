{
  "version": 3,
  "sources": ["../../vuetify/src/components/VInfiniteScroll/VInfiniteScroll.tsx"],
  "sourcesContent": ["// Styles\nimport './VInfiniteScroll.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useLocale } from '@/composables/locale'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, nextTick, onMounted, ref, shallowRef, watch } from 'vue'\nimport { convertToUnit, defineComponent, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type InfiniteScrollSide = 'start' | 'end' | 'both'\nexport type InfiniteScrollStatus = 'ok' | 'empty' | 'loading' | 'error'\n\ntype InfiniteScrollSlot = {\n  side: InfiniteScrollSide\n  props: Record<string, any>\n}\n\ntype VInfiniteScrollSlots = {\n  default: never\n  loading: InfiniteScrollSlot\n  error: InfiniteScrollSlot\n  empty: InfiniteScrollSlot\n  'load-more': InfiniteScrollSlot\n}\n\nexport const makeVInfiniteScrollProps = propsFactory({\n  color: String,\n  direction: {\n    type: String as PropType<'vertical' | 'horizontal'>,\n    default: 'vertical',\n    validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n  },\n  side: {\n    type: String as PropType<InfiniteScrollSide>,\n    default: 'end',\n    validator: (v: any) => ['start', 'end', 'both'].includes(v),\n  },\n  mode: {\n    type: String as PropType<'intersect' | 'manual'>,\n    default: 'intersect',\n    validator: (v: any) => ['intersect', 'manual'].includes(v),\n  },\n  margin: [Number, String],\n  loadMoreText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.loadMore',\n  },\n  emptyText: {\n    type: String,\n    default: '$vuetify.infiniteScroll.empty',\n  },\n\n  ...makeDimensionProps(),\n  ...makeTagProps(),\n}, 'VInfiniteScroll')\n\nexport const VInfiniteScrollIntersect = defineComponent({\n  name: 'VInfiniteScrollIntersect',\n\n  props: {\n    side: {\n      type: String as PropType<InfiniteScrollSide>,\n      required: true,\n    },\n    rootMargin: String,\n  },\n\n  emits: {\n    intersect: (side: InfiniteScrollSide, isIntersecting: boolean) => true,\n  },\n\n  setup (props, { emit }) {\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n\n    watch(isIntersecting, async val => {\n      emit('intersect', props.side, val)\n    })\n\n    useRender(() => (\n      <div\n        class=\"v-infinite-scroll-intersect\"\n        style={{\n          '--v-infinite-margin-size': props.rootMargin,\n        }}\n        ref={ intersectionRef }\n      >&nbsp;</div>\n    ))\n\n    return {}\n  },\n})\n\nexport const VInfiniteScroll = genericComponent<VInfiniteScrollSlots>()({\n  name: 'VInfiniteScroll',\n\n  props: makeVInfiniteScrollProps(),\n\n  emits: {\n    load: (options: { side: InfiniteScrollSide, done: (status: InfiniteScrollStatus) => void }) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const rootEl = ref<HTMLDivElement>()\n    const startStatus = shallowRef<InfiniteScrollStatus>('ok')\n    const endStatus = shallowRef<InfiniteScrollStatus>('ok')\n    const margin = computed(() => convertToUnit(props.margin))\n    const isIntersecting = shallowRef(false)\n\n    function setScrollAmount (amount: number) {\n      if (!rootEl.value) return\n\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft'\n      rootEl.value[property] = amount\n    }\n\n    function getScrollAmount () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'scrollTop' : 'scrollLeft'\n      return rootEl.value[property]\n    }\n\n    function getScrollSize () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'scrollHeight' : 'scrollWidth'\n      return rootEl.value[property]\n    }\n\n    function getContainerSize () {\n      if (!rootEl.value) return 0\n\n      const property = props.direction === 'vertical' ? 'clientHeight' : 'clientWidth'\n      return rootEl.value[property]\n    }\n\n    onMounted(() => {\n      if (!rootEl.value) return\n\n      if (props.side === 'start') {\n        setScrollAmount(getScrollSize())\n      } else if (props.side === 'both') {\n        setScrollAmount(getScrollSize() / 2 - getContainerSize() / 2)\n      }\n    })\n\n    function setStatus (side: InfiniteScrollSide, status: InfiniteScrollStatus) {\n      if (side === 'start') {\n        startStatus.value = status\n      } else if (side === 'end') {\n        endStatus.value = status\n      }\n    }\n\n    function getStatus (side: string) {\n      return side === 'start' ? startStatus.value : endStatus.value\n    }\n\n    let previousScrollSize = 0\n    function handleIntersect (side: InfiniteScrollSide, _isIntersecting: boolean) {\n      isIntersecting.value = _isIntersecting\n      if (isIntersecting.value) {\n        intersecting(side)\n      }\n    }\n\n    function intersecting (side: InfiniteScrollSide) {\n      if (props.mode !== 'manual' && !isIntersecting.value) return\n\n      const status = getStatus(side)\n      if (!rootEl.value || ['empty', 'loading'].includes(status)) return\n\n      previousScrollSize = getScrollSize()\n      setStatus(side, 'loading')\n\n      function done (status: InfiniteScrollStatus) {\n        setStatus(side, status)\n\n        nextTick(() => {\n          if (status === 'empty' || status === 'error') return\n\n          if (status === 'ok' && side === 'start') {\n            setScrollAmount(getScrollSize() - previousScrollSize + getScrollAmount())\n          }\n          if (props.mode !== 'manual') {\n            nextTick(() => {\n              window.requestAnimationFrame(() => {\n                window.requestAnimationFrame(() => {\n                  window.requestAnimationFrame(() => {\n                    intersecting(side)\n                  })\n                })\n              })\n            })\n          }\n        })\n      }\n\n      emit('load', { side, done })\n    }\n\n    const { t } = useLocale()\n\n    function renderSide (side: InfiniteScrollSide, status: InfiniteScrollStatus) {\n      if (props.side !== side && props.side !== 'both') return\n\n      const onClick = () => intersecting(side)\n      const slotProps = { side, props: { onClick, color: props.color } }\n\n      if (status === 'error') return slots.error?.(slotProps)\n\n      if (status === 'empty') return slots.empty?.(slotProps) ?? <div>{ t(props.emptyText) }</div>\n\n      if (props.mode === 'manual') {\n        if (status === 'loading') {\n          return slots.loading?.(slotProps) ?? (\n            <VProgressCircular indeterminate color={ props.color } />\n          )\n        }\n\n        return slots['load-more']?.(slotProps) ?? (\n          <VBtn variant=\"outlined\" color={ props.color } onClick={ onClick }>\n            { t(props.loadMoreText) }\n          </VBtn>\n        )\n      }\n\n      return slots.loading?.(slotProps) ?? (\n        <VProgressCircular indeterminate color={ props.color } />\n      )\n    }\n\n    const { dimensionStyles } = useDimension(props)\n\n    useRender(() => {\n      const Tag = props.tag\n      const hasStartIntersect = props.side === 'start' || props.side === 'both'\n      const hasEndIntersect = props.side === 'end' || props.side === 'both'\n      const intersectMode = props.mode === 'intersect'\n\n      return (\n        <Tag\n          ref={ rootEl }\n          class={[\n            'v-infinite-scroll',\n            `v-infinite-scroll--${props.direction}`,\n            {\n              'v-infinite-scroll--start': hasStartIntersect,\n              'v-infinite-scroll--end': hasEndIntersect,\n            },\n          ]}\n          style={ dimensionStyles.value }\n        >\n          <div class=\"v-infinite-scroll__side\">\n            { renderSide('start', startStatus.value) }\n          </div>\n\n          { hasStartIntersect && intersectMode && (\n            <VInfiniteScrollIntersect\n              key=\"start\"\n              side=\"start\"\n              onIntersect={ handleIntersect }\n              rootMargin={ margin.value }\n            />\n          )}\n\n          { slots.default?.() }\n\n          { hasEndIntersect && intersectMode && (\n            <VInfiniteScrollIntersect\n              key=\"end\"\n              side=\"end\"\n              onIntersect={ handleIntersect }\n              rootMargin={ margin.value }\n            />\n          )}\n\n          <div class=\"v-infinite-scroll__side\">\n            { renderSide('end', endStatus.value) }\n          </div>\n        </Tag>\n      )\n    })\n  },\n})\n\nexport type VInfiniteScroll = InstanceType<typeof VInfiniteScroll>\n"],
  "mappings": "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",
  "names": ["makeVInfiniteScrollProps", "propsFactory", "color", "String", "direction", "type", "default", "validator", "v", "includes", "side", "mode", "margin", "Number", "loadMoreText", "emptyText", "makeDimensionProps", "makeTagProps", "VInfiniteScrollIntersect", "defineComponent", "name", "props", "required", "rootMargin", "emits", "intersect", "isIntersecting", "setup", "_ref", "emit", "intersectionRef", "useIntersectionObserver", "watch", "val", "useRender", "_createElementVNode", "_createTextVNode", "VInfiniteScroll", "genericComponent", "load", "options", "_ref2", "slots", "rootEl", "ref", "startStatus", "shallowRef", "endStatus", "computed", "convertToUnit", "setScrollAmount", "amount", "value", "property", "getScrollAmount", "getScrollSize", "getContainerSize", "onMounted", "setStatus", "status", "getStatus", "previousScrollSize", "handleIntersect", "_isIntersecting", "intersecting", "done", "nextTick", "window", "requestAnimationFrame", "t", "useLocale", "renderSide", "onClick", "slotProps", "error", "empty", "loading", "_createVNode", "VProgressCircular", "VBtn", "dimensionStyles", "useDimension", "Tag", "tag", "hasStartIntersect", "hasEndIntersect", "intersectMode", "_normalizeClass", "_normalizeStyle"]
}
